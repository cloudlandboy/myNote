{"root":{"data":{"text":"java泛型","expandState":"expand"},"children":[{"data":{"text":"概念","expandState":"collapse"},"children":[{"data":{"text":"泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型"},"children":[]}]},{"data":{"text":"泛型方法","expandState":"collapse"},"children":[{"data":{"text":"简单定义","note":"```\npublic class Test<T>{}\n\n```"},"children":[]},{"data":{"text":"简单实例化","note":"```\nTest<Object> t = new Test<Object>();\n\n```"},"children":[]},{"data":{"text":"规则","expandState":"collapse"},"children":[{"data":{"text":"所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前。"},"children":[]},{"data":{"text":"每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。"},"children":[]},{"data":{"text":"类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。"},"children":[]},{"data":{"text":"泛型方法体的声明和其他方法一样。注意类型参数只能代表引用型类型，不能是原始类型（像int,double,char的等）。"},"children":[]}]}]},{"data":{"text":"泛型类","expandState":"collapse"},"children":[{"data":{"text":"泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开"},"children":[]},{"data":{"text":"一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符"},"children":[]},{"data":{"text":"因为他们接受一个或多个参数，这些类被称为参数化的类或参数化的类型"},"children":[]},{"data":{"text":"例子","image":"https://i.postimg.cc/dtKyy99x/20200110183927.png","imageTitle":"dtKyy99x/20200110183927.png","imageSize":{"width":200,"height":132}},"children":[]}]},{"data":{"text":"类型通配符","expandState":"collapse"},"children":[{"data":{"text":"类型通配符一般是使用?代替具体的类型参数","expandState":"collapse"},"children":[{"data":{"text":"List<?>在逻辑上是List<String>,List<Integer> 等所有List<具体类型实参>的父类"},"children":[]}]},{"data":{"text":"类型通配符上限","expandState":"collapse"},"children":[{"data":{"text":"List<? extends Number>如此定义就是通配符泛型值接受Number及其下层子类类型"},"children":[]}]},{"data":{"text":"类型通配符下限","expandState":"collapse"},"children":[{"data":{"text":"List<? super Number>表示类型只能接受Number及其三层父类类型"},"children":[]}]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}