{"root":{"data":{"text":"java循环结构","expandState":"expand"},"children":[{"data":{"text":"while 循环","expandState":"collapse","note":"```\nwhile( 布尔表达式 ) {\n\t//循环内容\n}\n\n```"},"children":[{"data":{"text":"只要布尔表达式为 true，循环体会一直执行下去","expandState":"expand"},"children":[]}]},{"data":{"text":"do…while 循环","expandState":"collapse","note":"```\ndo {\n\t//代码语句\n}while(布尔表达式);\n\n```"},"children":[{"data":{"text":"对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次","expandState":"expand"},"children":[]}]},{"data":{"text":"for 循环","expandState":"collapse","note":"```\nfor(初始化; 布尔表达式; 更新) {\n\t//代码语句\n}\n\n```"},"children":[{"data":{"text":"最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。","expandState":"expand"},"children":[]},{"data":{"text":"然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。","expandState":"expand"},"children":[]},{"data":{"text":"执行一次循环后，更新循环控制变量。","expandState":"expand"},"children":[]},{"data":{"text":"再次检测布尔表达式。循环执行上面的过程。","expandState":"expand"},"children":[]}]},{"data":{"text":"Java 增强 for 循环","expandState":"collapse","note":"```\nfor(声明语句 : 表达式){\n\t//代码句子\n}\n\n```"},"children":[{"data":{"text":"声明新的局部变量，该变量的类型必须和数组元素的类型匹配","expandState":"expand"},"children":[]},{"data":{"text":"其作用域限定在循环语句块，其值与此时数组元素的值相等。","expandState":"expand"},"children":[]}]},{"data":{"text":"break 关键字","expandState":"collapse"},"children":[{"data":{"text":"break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。","expandState":"expand"},"children":[]},{"data":{"text":"break 跳出最里层的循环，并且继续执行该循环下面的语句。","expandState":"expand"},"children":[]}]},{"data":{"text":"continue 关键字","expandState":"collapse"},"children":[{"data":{"text":"continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。","expandState":"expand"},"children":[]},{"data":{"text":"在 for 循环中，continue 语句使程序立即跳转到更新语句。","expandState":"expand"},"children":[]},{"data":{"text":"在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。","expandState":"expand"},"children":[]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}