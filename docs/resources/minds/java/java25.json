{"root":{"data":{"text":"java集合框架","expandState":"expand"},"children":[{"data":{"text":"Collection接口","expandState":"collapse","note":"Collection接口是最基本的容器接口，继承至Iterable接口，允许元素重复，可以无序"},"children":[{"data":{"text":"List接口","expandState":"collapse"},"children":[{"data":{"text":"LinkedList","expandState":"collapse"},"children":[{"data":{"text":"底层的数据结构是链表结构"},"children":[]},{"data":{"text":"查询较慢，增删较快"},"children":[]}]},{"data":{"text":"ArrayList","expandState":"collapse"},"children":[{"data":{"text":"底层的数据结构使用的是数组结构"},"children":[]},{"data":{"text":"查询很快，但增删较慢"},"children":[]},{"data":{"text":"线程不同步"},"children":[]}]},{"data":{"text":"Vector","expandState":"collapse"},"children":[{"data":{"text":"底层是数组数据结构"},"children":[]},{"data":{"text":"线程同步"},"children":[]},{"data":{"text":"无论查询还是增删都很慢，被ArrayList替代了"},"children":[]}]}]},{"data":{"text":"Set接口","expandState":"collapse"},"children":[{"data":{"text":"不允许在其中放入重复的元素"},"children":[]},{"data":{"text":"最多只能包含一个null元素"},"children":[]},{"data":{"text":"HashSet类","expandState":"collapse"},"children":[{"data":{"text":"底层实现是基于HashMap"},"children":[]},{"data":{"text":"不保证Set的迭代顺序"},"children":[]},{"data":{"text":"不保证该顺序永久不变"},"children":[]}]}]}]},{"data":{"text":"Map接口","expandState":"collapse"},"children":[{"data":{"text":"HashMap类","expandState":"collapse"},"children":[{"data":{"text":"基于哈希表的Map接口实现，利用哈希算法根据hashCode()来配置存储地址"},"children":[]}]},{"data":{"text":"TreeMap类","expandState":"collapse"},"children":[{"data":{"text":"基于红黑树（Red-Black tree）的NavigableMap 实现。","note":"该映射根据其键的自然顺序进行排序，或者 根据创建映射时提供的Comparator 进行排序，具体取决于使用的构造方法"},"children":[]}]},{"data":{"text":"SortedMap接口","expandState":"collapse"},"children":[{"data":{"text":"进一步提供关于键的总体排序 的 Map"},"children":[]}]}]},{"data":{"text":"辅助工具类","expandState":"collapse"},"children":[{"data":{"text":"Collections、Arrays类","expandState":"collapse"},"children":[{"data":{"text":"提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作"},"children":[]}]},{"data":{"text":"Comparable","expandState":"collapse"},"children":[{"data":{"text":"Comparable用作默认的比较方式，实现了该接口的类之间可以相互进行比较，这个对象组成的集合就可以直接通过sort()进行排序了"},"children":[]}]},{"data":{"text":"Comparator接口","expandState":"collapse"},"children":[{"data":{"text":"Comparator是设计模式中策略模式的一种应用"},"children":[]}]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}