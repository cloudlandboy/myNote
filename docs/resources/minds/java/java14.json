{"root":{"data":{"text":"java运算符","expandState":"expand","note":null},"children":[{"data":{"text":"算术运算符","expandState":"collapse","note":"设 `int A=10,B=20;`"},"children":[{"data":{"text":"+\t加法 - 相加运算符两侧的值\tA + B 等于 30"},"children":[]},{"data":{"text":"-\t减法 - 左操作数减去右操作数\tA – B 等于 -10"},"children":[]},{"data":{"text":"*\t乘法 - 相乘操作符两侧的值\tA * B等于200"},"children":[]},{"data":{"text":"/\t除法 - 左操作数除以右操作数\tB / A等于2"},"children":[]},{"data":{"text":"％\t取模 - 左操作数除右操作数的余数\tB%A等于0"},"children":[]},{"data":{"text":"++\t自增: 操作数的值增加1\tB++ 或 ++B 等于 21（区别详见下文）"},"children":[]},{"data":{"text":"--\t自减: 操作数的值减少1\tB-- 或 --B 等于 19（区别详见下文）"},"children":[]},{"data":{"text":"自增自减运算符","expandState":"expand"},"children":[{"data":{"text":"自增（++）自减（--）运算符是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数"},"children":[]},{"data":{"text":"（i ++）表示运算完成之后增1，（++ i）表示增1之后再运算"},"children":[]},{"data":{"id":"bzrximcjwhk0","created":1578640962327,"text":"i++相当于i=i+1，i--相当于i=i-1"},"children":[]}]}]},{"data":{"text":"关系运算符","expandState":"collapse","note":"设 `int A=10,B=20;`"},"children":[{"data":{"text":"==\t检查如果两个操作数的值是否相等，如果相等则条件为真。\t（A == B）为假(非真)。"},"children":[]},{"data":{"text":"!=\t检查如果两个操作数的值是否相等，如果值不相等则条件为真。\t(A != B) 为真。"},"children":[]},{"data":{"text":"> \t检查左操作数的值是否大于右操作数的值，如果是那么条件为真。\t（A> B）非真。"},"children":[]},{"data":{"text":"< \t检查左操作数的值是否小于右操作数的值，如果是那么条件为真。\t（A <B）为真。"},"children":[]},{"data":{"text":"> =\t检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。\t（A> = B）为假。"},"children":[]},{"data":{"text":"<=\t检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。\t（A <= B）为真。"},"children":[]}]},{"data":{"text":"位运算符","expandState":"collapse","note":"Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。位运算符作用在所有的位上，并且按位运算\n\n设 `int A=10,B=20;`"},"children":[{"data":{"text":"＆\t如果相对应位都是1，则结果为1，否则为0\t（A＆B），得到0","note":"A：00001010   （10）\nB：00010100\t（20）\n\nC：00000000\t（0）"},"children":[]},{"data":{"text":"|\t如果相对应位都是0，则结果为0，否则为1\t（A | B）得到30","note":"A：00001010   （10）\nB：00010100\t（20）\n\nC：00011110\t（30）"},"children":[]},{"data":{"text":"^\t如果相对应位值相同，则结果为0，否则为1\t（A ^ B）得到30","note":"A：00001010   （10）\nB：00010100\t（20）\n\nC：00011110\t（30）"},"children":[]},{"data":{"text":"〜\t按位补运算符翻转操作数的每一位，即0变成1，1变成0。\t（〜A）得到-11","hyperlink":"https://blog.csdn.net/u010841296/article/details/52850307","hyperlinkTitle":"java 原码、反码、补码计算 以及 取反(~)运算"},"children":[]},{"data":{"text":"<< \t按位左移运算符。左操作数按位左移右操作数指定的位数。\tA << 2得到40","note":"A：00001010 （10）\n\nA：00101000 （40）"},"children":[]},{"data":{"text":">> \t按位右移运算符。左操作数按位右移右操作数指定的位数。\tA >> 2得到2","note":"A：00001010 （10）\n\nA：00000010 （2）"},"children":[]},{"data":{"text":">>> \t按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。\tA>>>2得到2","note":"右移位运算符>>，若操作的值为正，则在高位插入0；若值为负，则在高位插入1。\n\n右移补零操作符>>>，无论正负，都在高位插入0。"},"children":[]}]},{"data":{"text":"逻辑运算符","expandState":"collapse","note":"`boolean A=true,B=false;`"},"children":[{"data":{"text":"&&\t称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。\t（A && B）为假。"},"children":[]},{"data":{"text":"| |\t称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。\t（A | | B）为真。"},"children":[]},{"data":{"text":"！\t称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。\t！（A && B）为真。"},"children":[]},{"data":{"text":"当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。"},"children":[]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}