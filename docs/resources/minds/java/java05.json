{"root":{"data":{"text":"java 基础语法","expandState":"expand"},"children":[{"data":{"text":"概念","expandState":"collapse"},"children":[{"data":{"text":"对象","note":"对象是类的一个实例，有`状态`和`行为`。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。"},"children":[]},{"data":{"text":"类","expandState":"expand","note":"类是一个模板，它描述一类对象的行为和状态。"},"children":[]},{"data":{"text":"方法","note":"方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。"},"children":[]},{"data":{"text":"实例变量","note":"每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。"},"children":[]}]},{"data":{"text":"基本语法","expandState":"collapse"},"children":[{"data":{"text":"大小写敏感","note":"Java是大小写敏感的，这就意味着标识符`Hello`与`hello`是不同的。"},"children":[]},{"data":{"text":"类名","note":"对于所有的类来说，类名的`首字母应该大写`。如果类名由若干单词组成，那么`每个单词的首字母应该大写`，例如 `MyFirstJavaClass` 。"},"children":[]},{"data":{"text":"方法名","note":"所有的方法名都应该以`小写字母开头`。如果方法名含有若干单词，则`后面的每个单词首字母大写`。"},"children":[]},{"data":{"text":"源文件名","note":"源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。。"},"children":[]},{"data":{"text":"主方法入口","expandState":"expand","layout_right_offset":{"x":8,"y":26},"note":"所有的Java 程序由\n`public static void main(String []args)`\n方法开始执行。"},"children":[]}]},{"data":{"text":"标识符","expandState":"collapse"},"children":[{"data":{"text":"概念","expandState":"collapse"},"children":[{"data":{"text":"Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。"},"children":[]}]},{"data":{"text":"注意点","expandState":"collapse"},"children":[{"data":{"text":"所有的标识符都应该以字母（A-Z或者a-z）,美元符（$）、或者下划线（_）开始"},"children":[]},{"data":{"text":"首字符之后可以是字母（A-Z或者a-z）,美元符（$）、下划线（_）或数字的任何字符组合"},"children":[]},{"data":{"text":"关键字不能用作标识符"},"children":[]},{"data":{"text":"标识符是大小写敏感的"},"children":[]},{"data":{"text":"合法标识符举例：age、$salary、_value、__1_value"},"children":[]},{"data":{"text":"非法标识符举例：123abc、-salary"},"children":[]}]}]},{"data":{"text":"修饰符","expandState":"collapse"},"children":[{"data":{"text":"访问控制修饰符 : default, public , protected, private"},"children":[]},{"data":{"text":"非访问控制修饰符 : final, abstract, strictfp"},"children":[]}]},{"data":{"text":"变量","expandState":"collapse"},"children":[{"data":{"text":"局部变量"},"children":[]},{"data":{"text":"类变量（静态变量）"},"children":[]},{"data":{"text":"成员变量（非静态变量）"},"children":[]}]},{"data":{"text":"数组","expandState":"collapse"},"children":[{"data":{"text":"数组是储存在堆上的对象，可以保存多个同类型变量。"},"children":[]}]},{"data":{"text":"枚举","expandState":"collapse"},"children":[{"data":{"text":"概念","expandState":"collapse"},"children":[{"data":{"text":"枚举限制变量只能是预先设定好的值。"},"children":[]}]},{"data":{"text":"注意点","expandState":"collapse"},"children":[{"data":{"text":"枚举可以单独声明或者声明在类里面。"},"children":[]},{"data":{"text":"方法、变量、构造函数也可以在枚举中定义。"},"children":[]}]}]},{"data":{"text":"java关键字","expandState":"collapse"},"children":[{"data":{"text":"50个Java保留字","note":"`abstract`\t表明类或者成员方法具有抽象属性\n`assert`\t断言，用来进行程序调试\n`boolean`\t基本数据类型之一，声明布尔类型的关键字\n`break`\t提前跳出一个块\n`byte`\t基本数据类型之一，字节类型\n`case`\t用在switch语句之中，表示其中的一个分支\n`catch`\t用在异常处理中，用来捕捉异常\n`char`\t基本数据类型之一，字符类型\n`class`\t声明一个类\n`const`\t保留关键字，没有具体含义\n`continue`\t回到一个块的开始处\n`default`\t默认，例如，用在switch语句中，表明一个默认的分支。Java8 中也作用于声明接口函数的默认实现\n`do`\t用在do-while循环结构中\n`double`\t基本数据类型之一，双精度浮点数类型\n`else`\t用在条件语句中，表明当条件不成立时的分支\n`enum`\t枚举\n`extends`\t表明一个类型是另一个类型的子类型。对于类，可以是另一个类或者抽象类；对于接口，可以是另一个接口\n`final`\t用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量\n`finally`\t用于处理异常情况，用来声明一个基本肯定会被执行到的语句块\n`float`\t基本数据类型之一，单精度浮点数类型\n`for`\t一种循环结构的引导词\n`goto`\t保留关键字，没有具体含义\n`if`\t条件语句的引导词\n`implements`\t表明一个类实现了给定的接口\n`import`\t表明要访问指定的类或包\n`instanceof`\t用来测试一个对象是否是指定类型的实例对象\n`int`\t基本数据类型之一，整数类型\n`interface`\t接口\n`long`\t基本数据类型之一，长整数类型\n`native`\t用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的\n`new`\t用来创建新实例对象\n`package`\t包\n`private`\t一种访问控制方式：私用模式\n`protected`\t一种访问控制方式：保护模式\n`public`\t一种访问控制方式：共用模式\n`return`\t从成员方法中返回数据\n`short`\t基本数据类型之一,短整数类型\n`static`\t表明具有静态属性\n`strictfp`\t用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范\n`super`\t表明当前对象的父类型的引用或者父类型的构造方法\n`switch`\t分支语句结构的引导词\n`synchronized`\t表明一段代码需要同步执行\n`this`\t指向当前实例对象的引用\n`throw` 抛出一个异常\n`throws`\t声明在当前定义的成员方法中所有需要抛出的异常\n`transient`\t声明不用序列化的成员域\n`try`\t尝试一个可能抛出异常的程序块\n`void`\t声明当前成员方法没有返回值\n`volatile`\t表明两个或者多个变量必须同步地发生变化\n`while`\t用在循环结构中`"},"children":[]},{"data":{"text":"不能用于常量、变量、和任何标识符的名称。"},"children":[]}]},{"data":{"text":"注释","expandState":"collapse"},"children":[{"data":{"text":"单行（//）以及多行注释（/* */）"},"children":[]},{"data":{"text":"注释中的字符将被Java编译器忽略。"},"children":[]}]},{"data":{"text":"空行","expandState":"collapse"},"children":[{"data":{"text":"空白行，或者有注释的行，Java编译器都会忽略掉"},"children":[]}]},{"data":{"text":"继承","expandState":"collapse"},"children":[{"data":{"text":"在Java中，一个类可以由其他类派生。"},"children":[]},{"data":{"text":"被继承的类称为超类（super class）"},"children":[]},{"data":{"text":"派生类称为子类（subclass）。"},"children":[]},{"data":{"text":"利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。"},"children":[]}]},{"data":{"text":"接口","expandState":"collapse"},"children":[{"data":{"text":"接口可理解为对象间相互通信的协议。"},"children":[]},{"data":{"text":"接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。"},"children":[]}]},{"data":{"text":"Java 源程序与编译型运行区别","expandState":"collapse"},"children":[{"data":{"id":"bzrwdreuyz40","created":1578637760420,"text":"分支主题","image":"https://i.postimg.cc/BZ10cVDg/ZSSDMld.png","imageTitle":"ZSSDMld.png","imageSize":{"width":200,"height":89}},"children":[]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}