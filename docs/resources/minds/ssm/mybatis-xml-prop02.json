{"root":{"data":{"text":"XML 映射配置文件（二）","expandState":"expand"},"children":[{"data":{"text":"typeAliases","expandState":"collapse","layout":null},"children":[{"data":{"text":"概念","expandState":"collapse","layout":null},"children":[{"data":{"text":"类型别名。","layout":null},"children":[]},{"data":{"text":"给java类型取一个别名，方便在核心配置、映射配置中来使用这个java类型。","layout":null},"children":[]},{"data":{"text":"它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余","layout":null},"children":[]}]},{"data":{"text":"比较（区别看resultType）","expandState":"collapse","layout":null},"children":[{"data":{"text":"不使用别名","expandState":"collapse","layout":null},"children":[{"data":{"text":"<select id=\"findUserById\" resultType=\"com.yu.model.User\" parameterType=\"long\">  \n\t    select * from t_user where id = #{id}\n</select>","background":"#c7edcc","color":"black","layout":null},"children":[]}]},{"data":{"text":"使用别名","expandState":"collapse","layout":null},"children":[{"data":{"text":"在核心配置文件中加上配置","expandState":"collapse","layout":null},"children":[{"data":{"text":"<typeAliases>  \r\n      <typeAlias type=\"com.yu.model.User\" alias=\"User\" />\r\n      <typeAlias type=\"com.yu.model.Org\" alias=\"Org\"/>\r\n</typeAliases>","background":"#c7edcc","layout":null},"children":[]}]},{"data":{"text":"或者注解方式","expandState":"collapse","note":"```\n\n@Alias(\"user\")\npublic class User {\n\t...\n}\n\n```","layout":null},"children":[{"data":{"id":"bztmgrn8amo0","created":1578812904832,"text":"<typeAliases>\r\n  <package name=\"com.yu.model\"/>\r\n</typeAliases>","background":"#c7edcc","layout":null},"children":[]},{"data":{"id":"bztmgrnri400","created":1578812904865,"text":"在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名","layout":null},"children":[]},{"data":{"id":"bztmgshava00","created":1578812906652,"text":"若有注解，则别名为其注解值","layout":null},"children":[]}]},{"data":{"text":"修改UserMapper.xml的配置","expandState":"collapse","layout":null},"children":[{"data":{"id":"bztmgrqpghs0","created":1578812905043,"text":"<select id=\"findUserById\" resultType=\"User\" parameterType=\"long\">  \r\n        select * from t_user where id = #{id}\r\n</select>","background":"#c7edcc","layout":null},"children":[]}]}]}]},{"data":{"text":"内置类型别名","expandState":"collapse","layout":null},"children":[{"data":{"text":"已经为许多常见的 Java 类型内建了相应的类型别名。它们都是大小写不敏感的，需要注意的是由基本类型名称重复导致的特殊处理。","layout":null},"children":[]},{"data":{"text":"内置类型别名","hyperlink":"https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases","hyperlinkTitle":"","layout":null},"children":[]}]}]},{"data":{"text":"typeHandlers","expandState":"collapse","layout":null},"children":[{"data":{"text":"概念","expandState":"collapse","layout":null},"children":[{"data":{"text":"类型处理器","note":"无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型","layout":null},"children":[]}]},{"data":{"text":"内置类处理器","expandState":"collapse","layout":null},"children":[{"data":{"text":"内置类处理器","hyperlink":"https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers","hyperlinkTitle":"","layout":null},"children":[]}]},{"data":{"text":"用途","expandState":"collapse","layout":null},"children":[{"data":{"text":"1）获取数据库的值，以合适的方式转变为对应的java类型","layout":null},"children":[]},{"data":{"text":"2）将java类型，以合适的方式转化为数据库的保存类型","layout":null},"children":[]}]},{"data":{"text":"自定义类型处理器","expandState":"collapse","layout":null},"children":[{"data":{"text":"实现 org.apache.ibatis.type.TypeHandler 接口","layout":null},"children":[]},{"data":{"text":"或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler","layout":null},"children":[]},{"data":{"text":"然后可以选择性地将它映射到一个 JDBC 类型","layout":null},"children":[]},{"data":{"text":"例子","expandState":"collapse","layout":null},"children":[{"data":{"id":"bztmpdjh6qo0","created":1578813579408,"text":" ","image":"https://i.postimg.cc/nhMfVR9X/20200112151849.png","imageTitle":"20200112151849.png","imageSize":{"width":200,"height":103},"layout":null},"children":[]},{"data":{"text":"<!-- mybatis-config.xml -->\n<typeHandlers>\n  <typeHandler handler=\"org.mybatis.example.ExampleTypeHandler\"/>\n</typeHandlers>","background":"#c7edcc","layout":null},"children":[]},{"data":{"text":"使用这个的类型处理器将会覆盖已经存在的处理 Java 的 String 类型属性和 VARCHAR 参数及结果的类型处理器。","layout":null},"children":[]},{"data":{"id":"bztms8ueln40","created":1578813804277,"text":"通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型\n不过这种行为可以通过两种方法改变","layout":null,"expandState":"collapse"},"children":[{"data":{"id":"bztmsn9anoo0","created":1578813835653,"text":"在类型处理器的配置元素（typeHandler 元素）上增加一个 javaType 属性","layout":null,"expandState":"collapse","note":"（比如：javaType=\"String\"）"},"children":[{"data":{"id":"bztmtklwceg0","created":1578813908249,"text":"<!-- mybatis-config.xml -->\n<typeHandlers>\n<typeHandler handler=\"org.mybatis.example.ExampleTypeHandler\" javaType=\"String\"/>\n</typeHandlers>","layout":null,"background":"#c7edcc"},"children":[]}]},{"data":{"id":"bztmupsw8h40","created":1578813997920,"text":"在类型处理器的类上增加一个 @MappedJdbcTypes 注解来指定与其关联的 JDBC 类型列表。\n 如果在 jdbcType 属性中也同时指定，则注解方式将被忽略。","layout":null},"children":[]}]},{"data":{"id":"bztmwf85ueg0","created":1578814131627,"text":"可以通过两种方式来指定被关联的 JDBC 类型","layout":null,"expandState":"collapse"},"children":[{"data":{"id":"bztmwh0y6zk0","created":1578814135544,"text":"在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType=\"VARCHAR\"）","layout":null},"children":[]},{"data":{"id":"bztmwhfvifs0","created":1578814136446,"text":"在类型处理器的类上增加一个 @MappedJdbcTypes 注解来指定与其关联的 JDBC 类型列表。 \n如果在 jdbcType 属性中也同时指定，则注解方式将被忽略。","layout":null},"children":[]}]}]}]},{"data":{"text":"处理枚举类型","expandState":"collapse","layout":null},"children":[{"data":{"text":"若想映射枚举类型 Enum，则需要从 EnumTypeHandler 或者 EnumOrdinalTypeHandler 中选一个来使用","layout":null},"children":[]},{"data":{"text":"默认情况下，MyBatis 会利用 EnumTypeHandler 来把 Enum 值转换成对应的名字。","layout":null},"children":[]},{"data":{"text":"<!-- mybatis-config.xml -->\r\n<typeHandlers>\r\n  <typeHandler handler=\"org.apache.ibatis.type.EnumOrdinalTypeHandler\" javaType=\"java.math.RoundingMode\"/>\r\n</typeHandlers>","layout":null,"background":"#c7edcc"},"children":[]}]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}