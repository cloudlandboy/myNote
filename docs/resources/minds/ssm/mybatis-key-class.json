{"root":{"data":{"text":"Mybatis几个关键类","expandState":"expand"},"children":[{"data":{"text":"mybatis-config.xml","expandState":"collapse","note":null},"children":[{"data":{"text":"XML 配置文件（configuration XML）中包含了对 MyBatis 系统的核心设置，"},"children":[]},{"data":{"text":"包含获取数据库连接实例的数据源（DataSource）和决定事务作用域和控制方式的事务管理器（TransactionManager）"},"children":[]},{"data":{"id":"bzt0opqpnaw0","created":1578751463185,"text":" ","image":"https://i.postimg.cc/XvnbxFWK/20200111220244.png","imageTitle":"20200111220244.png","imageSize":{"width":200,"height":132}},"children":[]}]},{"data":{"text":"SqlSessionFactoryBuilder","expandState":"collapse","layout":null},"children":[{"data":{"text":"概念","note":"SqlSessionFactoryBuilder通过类名就可以看出这个类的主要作用就是创建一个SqlSessionFactory，通过输入mybatis配置文件的字节流或者字符流，生成XMLConfigBuilder，XMLConfigBuilder创建一个Configuration，Configuration这个类中包含了mybatis的配置的一切信息，mybatis进行的所有操作都需要根据Configuration中的信息来进行。","layout":null},"children":[]},{"data":{"text":"作用域（Scope）和生命周期","expandState":"collapse","layout":null},"children":[{"data":{"text":"可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例","note":"但是最好还是不要让其一直存在以保证所有的 XML 解析资源开放给更重要的事情","layout":null},"children":[]},{"data":{"text":"这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。","note":"因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）","layout":null},"children":[]}]},{"data":{"text":" ","layout":null,"image":"https://i.postimg.cc/ZKZzJp9G/20200111220933.png","imageTitle":"20200111220933.png","imageSize":{"width":200,"height":36}},"children":[]}]},{"data":{"text":"SqlSessionFactory接口","expandState":"collapse"},"children":[{"data":{"text":"概念","expandState":"collapse"},"children":[{"data":{"text":"sql会话工厂，用于创建SqlSession"},"children":[]}]},{"data":{"text":"作用域（Scope）和生命周期","expandState":"collapse"},"children":[{"data":{"text":"SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由对它进行清除或重建"},"children":[]},{"data":{"text":"最佳作用域是应用作用域。有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。"},"children":[]}]},{"data":{"text":"如何创建","expandState":"collapse"},"children":[{"data":{"text":"使用xml构建","note":"String resource = \"org/mybatis/example/mybatis-config.xml\";\nInputStream inputStream = Resources.getResourceAsStream(resource);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);","expandState":"collapse"},"children":[{"data":{"id":"bzt0vvf3oxk0","created":1578752024093,"text":" ","image":"https://i.postimg.cc/T13jctN8/20200111221134.png","imageTitle":"0200111221134.png","imageSize":{"width":200,"height":19}},"children":[]}]},{"data":{"text":"java代码构建","note":"DataSource dataSource = BlogDataSourceFactory.getBlogDataSource();\n\nTransactionFactory transactionFactory = new JdbcTransactionFactory();\n\nEnvironment environment = new Environment(\"development\", transactionFactory, dataSource);\n\nConfiguration configuration = new Configuration(environment);\n\nconfiguration.addMapper(BlogMapper.class);\n\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);","expandState":"collapse"},"children":[{"data":{"id":"bzt0vvq6d200","created":1578752024762,"text":" ","image":"https://i.postimg.cc/3NfXf2zk/20200111221401.png","imageTitle":"20200111221401.png","imageSize":{"width":200,"height":49}},"children":[]}]}]}]},{"data":{"text":"SqlSession接口","expandState":"collapse"},"children":[{"data":{"text":"概念","expandState":"collapse"},"children":[{"data":{"text":"SqlSession是MyBatis的一个重要接口，定义了数据库的增删改查以及事务管理的常用方法。"},"children":[]},{"data":{"text":"SqlSession还提供了查找Mapper接口的有关方法。"},"children":[]}]},{"data":{"text":"作用域（Scope）和生命周期","expandState":"collapse"},"children":[{"data":{"text":"每个线程都应该有它自己的 SqlSession 实例"},"children":[]},{"data":{"text":"SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域"},"children":[]},{"data":{"text":"每次收到的 HTTP 请求，就可以打开一个 SqlSession，返回一个响应，就关闭它。"},"children":[]}]},{"data":{"text":"如何创建","expandState":"expand","note":"```\n\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n\t// do work\n} finally {\n\tsession.close();\n}\n\n```"},"children":[]}]},{"data":{"text":"Mapper接口","expandState":"collapse"},"children":[{"data":{"text":"概念","expandState":"collapse"},"children":[{"data":{"text":"承载了实际的业务逻辑，其生命周期比较短，由SqlSession创建,用于将Java对象和实际的SQL语句对应起来。"},"children":[]},{"data":{"text":"Mapper接口是指程序员自行定义的一个数据操纵接口，类似于通常所说的DAO接口。","note":"跟DAO不同的地方在于Mapper接口只需要程序员定义，不需要程序员去实现，MyBatis会自动为Mapper接口创建动态代理对象。Mapper接口的方法通常与Mapper配置文件中的select、insert、update、delete等XML结点存在一一对应关系。"},"children":[]}]},{"data":{"text":"实现方式","expandState":"collapse"},"children":[{"data":{"text":"(1)使用XML配置文件的方式。"},"children":[]},{"data":{"text":"(2)使用注解方式。"},"children":[]},{"data":{"text":"(3)直接使用MyBatis提供的API。"},"children":[]}]},{"data":{"text":"如何创建","expandState":"collapse"},"children":[{"data":{"text":" ","image":"https://i.postimg.cc/4yHyZtm7/202001112220.png","imageTitle":"202001112220.png","imageSize":{"width":200,"height":96}},"children":[]}]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}