{"root":{"data":{"text":"异常处理方式","expandState":"expand","hyperlink":"https://www.jianshu.com/p/7c4bbf1ba998","hyperlinkTitle":""},"children":[{"data":{"text":"HandlerExceptionResolver","expandState":"collapse","note":"Spring的处理器异常解析器`HandlerExceptionResolver`接口的实现负责处理各类控制器执行过程中出现的异常。也是上面提到的，是`DispatcherServlet`中的特殊bean，可以自定义配置处理。\n\n某种程度上讲，`HandlerExceptionResolver`与你在web应用描述符`web.xml`文件中能定义的异常映射（exception mapping）很相像，不过它比后者提供了更灵活的方式。比如它能提供异常被抛出时正在执行的是哪个处理器这样的信息。"},"children":[{"data":{"text":"可以实现全局异常控制"},"children":[]},{"data":{"text":"HandlerExceptionResolver接口中定义了一个resolveException方法，用于处理Controller中的异常。"},"children":[]},{"data":{"id":"bzuosxxtz340","created":1578921061081,"text":"Exception ex参数即Controller抛出的异常。返回值类型是ModelAndView，可以通过这个返回值来设置异常时显示的页面。"},"children":[]}]},{"data":{"text":"SimpleMappingExceptionResolver","expandState":"collapse"},"children":[{"data":{"text":"Spring提供的一个默认的异常实现类SimpleMappingExceptionResolver"},"children":[]}]},{"data":{"text":"@ExceptionHandler","expandState":"collapse"},"children":[{"data":{"text":"可以实现局局异常控制"},"children":[]},{"data":{"text":"如果@ExceptionHandler方法是在控制器内部定义的，那么它会接收并处理由控制器（或其任何子类）中的@RequestMapping方法抛出的异常。"},"children":[]},{"data":{"text":"如果你将@ExceptionHandler方法定义在@ControllerAdvice类中，那么它会处理相关控制器中抛出的异常。"},"children":[]}]},{"data":{"text":"web.xml的error-page标签","expandState":"collapse"},"children":[{"data":{"text":"简单处理异常和跳转，灵活程度不及HandlerExceptionResolver的异常处理"},"children":[]}]},{"data":{"id":"bzuov8u7ibc0","created":1578921241534,"text":"HandlerExceptionResolver和web.xml中配置的error-page会有冲突吗？","note":"如果`resolveException`返回了`ModelAndView`，会优先根据返回值中的页面来显示。不过，`resolveException`可以返回`null`，此时则展示`web.xml`中的`error-page`的`500`状态码配置的页面。\n当`web.xml`中有相应的`error-page`配置，则可以在实现`resolveException`方法时返回`null`。\n"},"children":[]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}