{"root":{"data":{"text":"BeanFactory与ApplacationContext","expandState":"expand","note":"IOC中最核心的接口是`Beanfactory`提供IOC的高级服务\n而`ApplicationContext`是建立在BeanFactory基础之上提供抽象的面向应用的服务。","hyperlink":"https://www.jianshu.com/p/a6144d2035a8","hyperlinkTitle":""},"children":[{"data":{"text":"BeanFacotry","expandState":"collapse"},"children":[{"data":{"text":"BeanFactory提供了一种先进的配置机制来管理任何种类bean(对象)，这种配置机制考虑到任何一种可能的存储方式"},"children":[]}]},{"data":{"text":"ApplicationContext","expandState":"collapse"},"children":[{"data":{"text":"建立在BeanFactory之上，具有BeanFactory的所有功能和行为"},"children":[]},{"data":{"text":"MessageSource, 提供国际化的消息访问","expandState":"collapse"},"children":[{"data":{"text":"扩展了MessageResource接口"},"children":[]}]},{"data":{"text":"资源访问，如URL和文件"},"children":[]},{"data":{"text":"事件传播"},"children":[]},{"data":{"text":"载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层"},"children":[]}]},{"data":{"text":"不同点","expandState":"collapse"},"children":[{"data":{"text":"选用哪个","expandState":"collapse"},"children":[{"data":{"text":"BeanFactory是延迟加载,如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常"},"children":[]},{"data":{"text":"ApplicationContext则在初始化自身是检验，这样有利于检查所依赖属性是否注入；所以通常情况下我们选择使用ApplicationContext"},"children":[]}]},{"data":{"text":"特性表","expandState":"collapse"},"children":[{"data":{"text":"特性                                                   BeanFactory ApplicationContext"},"children":[]},{"data":{"text":"Bean 实例化/装配                                Yes                 Yes"},"children":[]},{"data":{"text":"自动 BeanPostProcessor 注册                No                  Yes"},"children":[]},{"data":{"text":"自动 BeanFactoryPostProcessor 注册      No                  Yes"},"children":[]},{"data":{"text":"便捷的 MessageSource 访问( i18n)         No                  Yes"},"children":[]},{"data":{"text":"ApplicationEvent 发送                         No                  Yes"},"children":[]}]},{"data":{"text":"关系","expandState":"collapse"},"children":[{"data":{"text":"BeanFactory提供了配置框架和基本的功能"},"children":[]},{"data":{"text":"ApplicationContext建立在BeanFactory之上，并增加了其他的功能"},"children":[]},{"data":{"text":"一般来说，ApplicationContext是BeanFactory的完全超集， 任何BeanFactory功能和行为的描述也同样被认为适用于ApplicationContext"},"children":[]}]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}