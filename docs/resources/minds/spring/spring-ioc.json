{"root":{"data":{"text":"Spring ioc","expandState":"expand","note":"写过java的都知道：所有的对象都必须创建；或者说：使用对象之前必须先创建。而使用ioc之后，你就可以不再手动创建对象，而是从ioc容器中直接获取对象。\n\n就好像我们无需考虑对象的销毁回收一样，因为java垃圾回收机制帮助我们实现了这个过程；而ioc则是让我们无需考虑对象的创建过程，由ioc容器帮我们实现对象的创建、注入等过程。"},"children":[{"data":{"text":"ioc概念","expandState":"collapse","layout":null},"children":[{"data":{"text":"应用控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用，传递给它。\n也可以说，依赖被注入到对象中。\n所以，控制反转是，关于一个对象如何获取他所依赖的对象的引用，这个责任的反转。","layout":null},"children":[]},{"data":{"text":"控制反转（Inversion of Control，英文缩写为IoC）是一个重要的面向对象编程的法则来削减计算机程序的耦合问题，也是轻量级的Spring框架的核心。","layout":null},"children":[]},{"data":{"text":"控制反转一般分为两种类型，依赖注入（Dependency Injection，简称DI）和依赖查找（Dependency Lookup）。依赖注入应用比较广泛。","layout":null},"children":[]}]},{"data":{"text":"深入分析","expandState":"collapse","layout":null},"children":[{"data":{"text":"谁依赖于谁","priority":1,"layout":null,"expandState":"collapse"},"children":[{"data":{"text":"当然是应用程序依赖于IoC容器","layout":null},"children":[]}]},{"data":{"text":"为什么需要依赖","priority":2,"layout":null,"expandState":"collapse"},"children":[{"data":{"text":"应用程序需要IoC容器来提供对象需要的外部资源","layout":null},"children":[]}]},{"data":{"text":"谁注入谁","priority":3,"layout":null,"expandState":"collapse"},"children":[{"data":{"text":"很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象","layout":null},"children":[]}]},{"data":{"text":"注入了什么","priority":4,"layout":null,"expandState":"collapse"},"children":[{"data":{"text":"就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）","layout":null},"children":[]}]}]},{"data":{"text":"与new对象的区别","expandState":"collapse","layout":null},"children":[{"data":{"text":"正转与反转","layout":null,"expandState":"collapse"},"children":[{"data":{"text":"传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转","layout":null},"children":[]},{"data":{"text":"而反转则是由容器来帮忙创建及注入依赖对象","layout":null},"children":[]}]}]},{"data":{"text":"ioc优缺点","expandState":"collapse","layout":null},"children":[{"data":{"text":"优点","layout":null,"expandState":"collapse"},"children":[{"data":{"text":"实现组件之间的解耦，提高程序的灵活性和可维护性","layout":null},"children":[]}]},{"data":{"text":"缺点","layout":null,"expandState":"collapse"},"children":[{"data":{"text":"对象 生成因为是使用反射编程，在效率上有些损耗。\n但相对于IoC提高的维护性和灵活性来说，这点损耗是微不足道的，除非某对象的生成对效率要求特别高","layout":null},"children":[]}]}]},{"data":{"text":"图例说明","expandState":"collapse","layout":null},"children":[{"data":{"text":"传统new方式","layout":null,"expandState":"collapse"},"children":[{"data":{"text":"","layout":null,"image":"https://i.postimg.cc/dQrMKJmx/20200113164601.jpg","imageTitle":"20200113164601.jpg","imageSize":{"width":200,"height":143}},"children":[]}]},{"data":{"text":"使用ioc后","layout":null,"expandState":"collapse"},"children":[{"data":{"text":"","layout":null,"image":"https://i.postimg.cc/65XkWFM5/20200113164602.jpg","imageTitle":"20200113164602.jpg","imageSize":{"width":159,"height":200}},"children":[]}]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}